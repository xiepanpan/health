package edu.health.dao;

import edu.health.model.Exam;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface ExamMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@Delete({ "delete from exam", "where exam_id = #{examId,jdbcType=INTEGER}" })
	int deleteByPrimaryKey(Integer examId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@Insert({ "insert into exam (exam_id, exam_name, ", "exam_type, exam_content)",
			"values (#{examId,jdbcType=INTEGER}, #{examName,jdbcType=VARCHAR}, ",
			"#{examType,jdbcType=INTEGER}, #{examContent,jdbcType=LONGVARCHAR})" })
	int insert(Exam record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@InsertProvider(type = ExamSqlProvider.class, method = "insertSelective")
	int insertSelective(Exam record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@Select({ "select", "exam_id, exam_name, exam_type, exam_content", "from exam",
			"where exam_id = #{examId,jdbcType=INTEGER}" })
	@Results({ @Result(column = "exam_id", property = "examId", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "exam_name", property = "examName", jdbcType = JdbcType.VARCHAR),
			@Result(column = "exam_type", property = "examType", jdbcType = JdbcType.INTEGER),
			@Result(column = "exam_content", property = "examContent", jdbcType = JdbcType.LONGVARCHAR) })
	Exam selectByPrimaryKey(Integer examId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@UpdateProvider(type = ExamSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(Exam record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@Update({ "update exam", "set exam_name = #{examName,jdbcType=VARCHAR},",
			"exam_type = #{examType,jdbcType=INTEGER},", "exam_content = #{examContent,jdbcType=LONGVARCHAR}",
			"where exam_id = #{examId,jdbcType=INTEGER}" })
	int updateByPrimaryKeyWithBLOBs(Exam record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table exam
	 * @mbg.generated  Wed Jan 15 11:10:10 CST 2020
	 */
	@Update({ "update exam", "set exam_name = #{examName,jdbcType=VARCHAR},",
			"exam_type = #{examType,jdbcType=INTEGER}", "where exam_id = #{examId,jdbcType=INTEGER}" })
	int updateByPrimaryKey(Exam record);

	@Select({
		"<script>",
    	"select * from exam",
    	"where 1=1",
    	"<if test='type != null'>",
    	"and exam_type=#{type,jdbcType=INTEGER}",
    	"</if>",
    	"<if test='type != null'>",
    	"and exam_type=#{type,jdbcType=INTEGER}",
    	"</if>",
		"limit #{start,jdbcType=INTEGER},#{size,jdbcType=INTEGER}",
		"</script>"
    })
	@Results({ @Result(column = "exam_id", property = "examId", jdbcType = JdbcType.INTEGER, id = true),
		@Result(column = "exam_name", property = "examName", jdbcType = JdbcType.VARCHAR),
		@Result(column = "exam_type", property = "examType", jdbcType = JdbcType.INTEGER),
		@Result(column = "exam_content", property = "examContent", jdbcType = JdbcType.LONGVARCHAR) })
    List<Exam> query(@Param("type") Integer type,@Param("start") Integer start, @Param("size") Integer size);
}