package edu.health.dao;

import edu.health.model.PhysicalExam;
import edu.health.model.PhysicalExamJoinUser;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface PhysicalExamMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@Delete({ "delete from physical_exam", "where test_id = #{testId,jdbcType=INTEGER}" })
	int deleteByPrimaryKey(Integer testId);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@Insert({ "insert into physical_exam (test_id, height, ", "weight, heartbeat, ", "vital_capacity, sex, ",
			"stu_id, doctor_id, ", "left_eye, right_eye, ", "hearing, advice)",
			"values (#{testId,jdbcType=INTEGER}, #{height,jdbcType=DECIMAL}, ",
			"#{weight,jdbcType=DECIMAL}, #{heartbeat,jdbcType=VARCHAR}, ",
			"#{vitalCapacity,jdbcType=DECIMAL}, #{sex,jdbcType=VARCHAR}, ",
			"#{stuId,jdbcType=INTEGER}, #{doctorId,jdbcType=INTEGER}, ",
			"#{leftEye,jdbcType=VARCHAR}, #{rightEye,jdbcType=VARCHAR}, ",
			"#{hearing,jdbcType=VARCHAR}, #{advice,jdbcType=VARCHAR})" })
	int insert(PhysicalExam record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@InsertProvider(type = PhysicalExamSqlProvider.class, method = "insertSelective")
	int insertSelective(PhysicalExam record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@Select({ "select", "test_id, height, weight, heartbeat, vital_capacity, sex, stu_id, doctor_id, ",
			"left_eye, right_eye, hearing, advice", "from physical_exam",
			"where test_id = #{testId,jdbcType=INTEGER}" })
	@Results({ @Result(column = "test_id", property = "testId", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "height", property = "height", jdbcType = JdbcType.DECIMAL),
			@Result(column = "weight", property = "weight", jdbcType = JdbcType.DECIMAL),
			@Result(column = "heartbeat", property = "heartbeat", jdbcType = JdbcType.VARCHAR),
			@Result(column = "vital_capacity", property = "vitalCapacity", jdbcType = JdbcType.DECIMAL),
			@Result(column = "sex", property = "sex", jdbcType = JdbcType.VARCHAR),
			@Result(column = "stu_id", property = "stuId", jdbcType = JdbcType.INTEGER),
			@Result(column = "doctor_id", property = "doctorId", jdbcType = JdbcType.INTEGER),
			@Result(column = "left_eye", property = "leftEye", jdbcType = JdbcType.VARCHAR),
			@Result(column = "right_eye", property = "rightEye", jdbcType = JdbcType.VARCHAR),
			@Result(column = "hearing", property = "hearing", jdbcType = JdbcType.VARCHAR),
			@Result(column = "advice", property = "advice", jdbcType = JdbcType.VARCHAR) })
	PhysicalExam selectByPrimaryKey(Integer testId);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@UpdateProvider(type = PhysicalExamSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(PhysicalExam record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table physical_exam
	 * @mbg.generated  Thu Feb 27 11:23:34 CST 2020
	 */
	@Update({ "update physical_exam", "set height = #{height,jdbcType=DECIMAL},",
			"weight = #{weight,jdbcType=DECIMAL},", "heartbeat = #{heartbeat,jdbcType=VARCHAR},",
			"vital_capacity = #{vitalCapacity,jdbcType=DECIMAL},", "sex = #{sex,jdbcType=VARCHAR},",
			"stu_id = #{stuId,jdbcType=INTEGER},", "doctor_id = #{doctorId,jdbcType=INTEGER},",
			"left_eye = #{leftEye,jdbcType=VARCHAR},", "right_eye = #{rightEye,jdbcType=VARCHAR},",
			"hearing = #{hearing,jdbcType=VARCHAR},", "advice = #{advice,jdbcType=VARCHAR}",
			"where test_id = #{testId,jdbcType=INTEGER}" })
	int updateByPrimaryKey(PhysicalExam record);


	@Select({
    	"<script>",
    	"select physical_exam.*,stu.login_name as stu_name,stu.avatar as stu_avatar,stu.tel as tel,doct.login_name as doct_name,doct.avatar as doct_avatar",
    	"from physical_exam",
    	"left join users as stu on stu.user_id=physical_exam.stu_id",
    	"left join users as doct on doct.user_id=physical_exam.doctor_id",
    	"where 1=1",
    	"<if test='stuId != null'>",
    	"and physical_exam.stu_id=#{stuId,jdbcType=INTEGER}",
    	"</if>",
    	"<if test='doctId != null'>",
    	"and physical_exam.doctor_id=#{doctId,jdbcType=INTEGER}",
    	"</if>",
    	"<if test='tel != null'>",
    	"and stu.tel like #{tel,jdbcType=VARCHAR}",
    	"</if>",
		"limit #{start,jdbcType=INTEGER},#{size,jdbcType=INTEGER}",
    	"</script>",
    })
    @Results({
    	@Result(column = "test_id", property = "testId", jdbcType = JdbcType.INTEGER, id = true),
    	@Result(column = "height", property = "height", jdbcType = JdbcType.DECIMAL),
		@Result(column = "weight", property = "weight", jdbcType = JdbcType.DECIMAL),
		@Result(column = "heartbeat", property = "heartbeat", jdbcType = JdbcType.VARCHAR),
		@Result(column = "vital_capacity", property = "vitalCapacity", jdbcType = JdbcType.DECIMAL),
		@Result(column = "sex", property = "sex", jdbcType = JdbcType.VARCHAR),
		@Result(column = "stu_id", property = "stuId", jdbcType = JdbcType.INTEGER),
		@Result(column = "doctor_id", property = "doctorId", jdbcType = JdbcType.INTEGER),
		@Result(column = "left_eye", property = "leftEye", jdbcType = JdbcType.VARCHAR),
		@Result(column = "right_eye", property = "rightEye", jdbcType = JdbcType.VARCHAR),
		@Result(column = "hearing", property = "hearing", jdbcType = JdbcType.VARCHAR),
		@Result(column = "advice", property = "advice", jdbcType = JdbcType.VARCHAR),
        @Result(column="stu_name", property="stuName", jdbcType=JdbcType.VARCHAR),
        @Result(column="stu_avatar", property="stuAvatar", jdbcType=JdbcType.VARCHAR),
        @Result(column="doct_name", property="doctName", jdbcType=JdbcType.VARCHAR),
        @Result(column="doct_avatar", property="doctAvatar", jdbcType=JdbcType.VARCHAR),
        @Result(column="tel", property="tel", jdbcType=JdbcType.VARCHAR),
        
        
    })
    List<PhysicalExamJoinUser> query(@Param("stuId")Integer stuId,@Param("doctId")Integer doctId, @Param("tel") String tel,@Param("start")Integer start, @Param("size")Integer size);

    
    @Select({
    	"<script>",
    	"select count(*)",
    	"from physical_exam",
    	"left join users as stu on stu.user_id=physical_exam.stu_id",
    	"where 1=1",
    	"<if test='stuId != null'>",
    	"and physical_exam.stu_id=#{stuId,jdbcType=INTEGER}",
    	"</if>",
    	"<if test='doctId != null'>",
    	"and physical_exam.doctor_id=#{doctId,jdbcType=INTEGER}",
    	"</if>",
    	"<if test='tel != null'>",
    	"and stu.tel like #{tel,jdbcType=VARCHAR}",
    	"</if>",
    	"</script>",
    })
    Integer count(@Param("stuId")Integer stuId,@Param("doctId")Integer doctId,@Param("tel") String tel);
    
    
    @Update({
        "update physical_exam",
        "set", 
          "doctor_id = #{doctorId,jdbcType=INTEGER}",
        "where stu_id = #{stuId,jdbcType=INTEGER}"
    })
	void updateAssign(@Param("stuId")Integer stuId,@Param("doctorId") Integer doctorId);

    
    @Delete({ "delete from physical_exam", "where 1=1" })
	int delAll();
}