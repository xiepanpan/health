package edu.health.dao;

import edu.health.model.UserExam;
import edu.health.model.UserExamJoinUsers;
import edu.health.model.UserExamKey;
import edu.health.model.UserExamWithBLOBs;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface UserExamMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @Delete({
        "delete from user_exam",
        "where user_id = #{userId,jdbcType=INTEGER}",
          "and exam_id = #{examId,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(UserExamKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @Insert({
        "insert into user_exam (user_id, exam_id, ",
        "doctor_id, answer, ",
        "advice)",
        "values (#{userId,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER}, ",
        "#{doctorId,jdbcType=INTEGER}, #{answer,jdbcType=LONGVARCHAR}, ",
        "#{advice,jdbcType=LONGVARCHAR})"
    })
    int insert(UserExamWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @InsertProvider(type=UserExamSqlProvider.class, method="insertSelective")
    int insertSelective(UserExamWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @Select({
        "select",
        "user_id, exam_id, doctor_id, answer, advice",
        "from user_exam",
        "where user_id = #{userId,jdbcType=INTEGER}",
          "and exam_id = #{examId,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="exam_id", property="examId", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="doctor_id", property="doctorId", jdbcType=JdbcType.INTEGER),
        @Result(column="answer", property="answer", jdbcType=JdbcType.LONGVARCHAR),
        @Result(column="advice", property="advice", jdbcType=JdbcType.LONGVARCHAR)
    })
    UserExamWithBLOBs selectByPrimaryKey(UserExamKey key);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @UpdateProvider(type=UserExamSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(UserExamWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @Update({
        "update user_exam",
        "set doctor_id = #{doctorId,jdbcType=INTEGER},",
          "answer = #{answer,jdbcType=LONGVARCHAR},",
          "advice = #{advice,jdbcType=LONGVARCHAR}",
        "where user_id = #{userId,jdbcType=INTEGER}",
          "and exam_id = #{examId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKeyWithBLOBs(UserExamWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_exam
     *
     * @mbg.generated Tue Jan 14 12:40:34 CST 2020
     */
    @Update({
        "update user_exam",
        "set doctor_id = #{doctorId,jdbcType=INTEGER}",
        "where user_id = #{userId,jdbcType=INTEGER}",
          "and exam_id = #{examId,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(UserExam record);
    
    
   @Select({
	   "<script>",
	   "select user_exam.*, stu.login_name as stu_name,stu.avatar as stu_avatar,stu.tel as tel,doct.login_name as doct_name,doct.avatar as doct_avatar",
	   "from user_exam",
	   "left join users as stu on stu.user_id=user_exam.user_id",
	   
	   "left join users as doct on doct.user_id=user_exam.doctor_id",
	   "where 1=1",
	   "<if test='examId != null'>",
	   "and user_exam.exam_id=#{examId,jdbcType=INTEGER}",
	   "</if>",
	   "<if test='userId != null'>",
	   "and user_exam.user_id=#{userId,jdbcType=INTEGER}",
	   "</if>",
	   "<if test='doctorId != null'>",
	   "and user_exam.doctor_id=#{doctorId,jdbcType=INTEGER}",
	   "</if>",
	   "<if test='tel != null'>",
	   "and stu.tel like #{tel,jdbcType=VARCHAR}",
	   "</if>",
	   "limit #{start,jdbcType=INTEGER},#{size,jdbcType=INTEGER}",
	   "</script>"
   })
   @Results({
       @Result(column="user_id", property="userId", jdbcType=JdbcType.INTEGER, id=true),
       @Result(column="exam_id", property="examId", jdbcType=JdbcType.INTEGER, id=true),
       @Result(column="doctor_id", property="doctorId", jdbcType=JdbcType.INTEGER),
       @Result(column="answer", property="answer", jdbcType=JdbcType.LONGVARCHAR),
       @Result(column="advice", property="advice", jdbcType=JdbcType.LONGVARCHAR),
       
       @Result(column="stu_name", property="stuName", jdbcType=JdbcType.VARCHAR),
       @Result(column="stu_avatar", property="stuAvatar", jdbcType=JdbcType.VARCHAR),
       @Result(column="tel", property="tel", jdbcType=JdbcType.VARCHAR),
       @Result(column="doct_name", property="doctName", jdbcType=JdbcType.VARCHAR),
       @Result(column="doct_avatar", property="doctAvatar", jdbcType=JdbcType.VARCHAR),
   })
   List<UserExamJoinUsers> query(@Param("examId") Integer examId, @Param("userId")Integer userId, @Param("doctorId") Integer doctorId,@Param("tel") String tel, @Param("start") Integer start, @Param("size")Integer size);
   
   @Select({
	   "<script>",
	   "select count(*)",
	   "from user_exam", 
	   "left join users as stu on stu.user_id=user_exam.user_id",
	   "where 1=1",
	   "<if test='examId != null'>",
	   "and user_exam.exam_id=#{examId,jdbcType=INTEGER}",
	   "</if>",
	   "<if test='userId != null'>",
	   "and user_exam.user_id=#{userId,jdbcType=INTEGER}",
	   "</if>",
	   "<if test='doctorId != null'>",
	   "and user_exam.doctor_id=#{doctorId,jdbcType=INTEGER}",
	   "</if>", 
	   "<if test='tel != null'>",
	   "and stu.tel like #{tel,jdbcType=VARCHAR}",
	   "</if>",
	   "</script>"
   })
   Integer count(@Param("examId") Integer examId, @Param("userId")Integer userId, @Param("doctorId") Integer doctorId, @Param("tel") String tel);
   
   
   @Delete({
       "delete from user_exam",
       "where exam_id = #{examId,jdbcType=INTEGER}"
   })
   void delByExamId(@Param("examId") Integer examId);
   
}