package edu.health.dao;

import edu.health.model.Users;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface UsersMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@Delete({ "delete from users", "where user_id = #{userId,jdbcType=INTEGER}" })
	int deleteByPrimaryKey(Integer userId);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@Insert({ "insert into users (user_id, login_name, ", "login_pwd, user_type, ", "state, tel, email, ",
			"avatar, school)", "values (#{userId,jdbcType=INTEGER}, #{loginName,jdbcType=VARCHAR}, ",
			"#{loginPwd,jdbcType=VARCHAR}, #{userType,jdbcType=INTEGER}, ",
			"#{state,jdbcType=SMALLINT}, #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ",
			"#{avatar,jdbcType=VARCHAR}, #{school,jdbcType=VARCHAR})" })
	int insert(Users record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@InsertProvider(type = UsersSqlProvider.class, method = "insertSelective")
	int insertSelective(Users record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@Select({ "select", "user_id, login_name, login_pwd, user_type, state, tel, email, avatar, school", "from users",
			"where user_id = #{userId,jdbcType=INTEGER}" })
	@Results({ @Result(column = "user_id", property = "userId", jdbcType = JdbcType.INTEGER, id = true),
			@Result(column = "login_name", property = "loginName", jdbcType = JdbcType.VARCHAR),
			@Result(column = "login_pwd", property = "loginPwd", jdbcType = JdbcType.VARCHAR),
			@Result(column = "user_type", property = "userType", jdbcType = JdbcType.INTEGER),
			@Result(column = "state", property = "state", jdbcType = JdbcType.SMALLINT),
			@Result(column = "tel", property = "tel", jdbcType = JdbcType.VARCHAR),
			@Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
			@Result(column = "avatar", property = "avatar", jdbcType = JdbcType.VARCHAR),
			@Result(column = "school", property = "school", jdbcType = JdbcType.VARCHAR) })
	Users selectByPrimaryKey(Integer userId);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@UpdateProvider(type = UsersSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(Users record);


	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table users
	 * @mbg.generated  Mon Mar 09 11:09:42 CST 2020
	 */
	@Update({ "update users", "set login_name = #{loginName,jdbcType=VARCHAR},",
			"login_pwd = #{loginPwd,jdbcType=VARCHAR},", "user_type = #{userType,jdbcType=INTEGER},",
			"state = #{state,jdbcType=SMALLINT},", "tel = #{tel,jdbcType=VARCHAR},",
			"email = #{email,jdbcType=VARCHAR},", "avatar = #{avatar,jdbcType=VARCHAR},",
			"school = #{school,jdbcType=VARCHAR}", "where user_id = #{userId,jdbcType=INTEGER}" })
	int updateByPrimaryKey(Users record);


	@Select({
    	"select * from users",
    	"where login_name=#{name,jdbcType=VARCHAR}"
    })
	@Results({ @Result(column = "user_id", property = "userId", jdbcType = JdbcType.INTEGER, id = true),
		@Result(column = "login_name", property = "loginName", jdbcType = JdbcType.VARCHAR),
		@Result(column = "login_pwd", property = "loginPwd", jdbcType = JdbcType.VARCHAR),
		@Result(column = "user_type", property = "userType", jdbcType = JdbcType.INTEGER),
		@Result(column = "state", property = "state", jdbcType = JdbcType.SMALLINT),
		@Result(column = "tel", property = "tel", jdbcType = JdbcType.VARCHAR),
		@Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
		@Result(column = "avatar", property = "avatar", jdbcType = JdbcType.VARCHAR),
		@Result(column = "school", property = "school", jdbcType = JdbcType.VARCHAR) })
	Users findByLoginName(@Param("name")String name);
	
	
	@Select({
		"<script>",
		"select * from users ",
		"where 1=1",
		"<if test='name != null'>",
		"and login_name=#{name, jdbcType=VARCHAR}",
		"</if>",
		"<if test='type != null'>",
		"and user_type=#{type, jdbcType=INTEGER}",
		"</if>",
		"limit #{start,jdbcType=INTEGER},#{size,jdbcType=INTEGER}",
		"</script>"
	})
	@Results({ @Result(column = "user_id", property = "userId", jdbcType = JdbcType.INTEGER, id = true),
		@Result(column = "login_name", property = "loginName", jdbcType = JdbcType.VARCHAR),
		@Result(column = "login_pwd", property = "loginPwd", jdbcType = JdbcType.VARCHAR),
		@Result(column = "user_type", property = "userType", jdbcType = JdbcType.INTEGER),
		@Result(column = "state", property = "state", jdbcType = JdbcType.SMALLINT),
		@Result(column = "tel", property = "tel", jdbcType = JdbcType.VARCHAR),
		@Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
		@Result(column = "avatar", property = "avatar", jdbcType = JdbcType.VARCHAR),
		@Result(column = "school", property = "school", jdbcType = JdbcType.VARCHAR) })
	List<Users> query(@Param("type") Integer type,@Param("name") String name, @Param("start") Integer start, @Param("size") Integer size);
}